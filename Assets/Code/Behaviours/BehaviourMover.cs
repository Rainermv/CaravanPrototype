//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace Caravan
{
	public abstract class BehaviourMover : GameElementBehaviour
	{
		private float _speed;
		private bool _reached_destination;
		private bool _use_velocity;

		protected Rigidbody2D rigidbody = null;

		public float Speed {
			get {
				return _speed;
			}
			set {
				_speed = value;
			}
		}

		public bool ReachedDestination {
			get {
				return _reached_destination;
			}
			set {
				_reached_destination = value;
			}
		}

		public BehaviourMover (GameElement parent, float speed, bool use_velocity) : base(parent)
		{
			_speed = speed;
			_reached_destination = false; 
			_use_velocity = use_velocity;

			rigidbody = _parent.gameObject.GetComponent<Rigidbody2D> ();

		}

		public bool UseVelocity {
			get {
				return _use_velocity;
			}
			set {
				_use_velocity = value;
			}
		}

		protected void MoveTowards(Vector2 position){

			if (_use_velocity)
				MoveTowardsUsingVelocity (position);
			else
				MoveTowardsUsingForce (position);

		}

		private void MoveTowardsUsingForce(Vector2 position){


			Vector2 dir = position - (Vector2)_parent.transform.position;
			
			//to give this vector a magnitude in relation to speed, normalize it then multiply the result by the speed :
			dir = (position - (Vector2)_parent.transform.position).normalized * Speed;
			
			//finally, simply apply the vector to the velocity variable of the rigidbody component :
			
			//rigidbody.velocity = dir;
			rigidbody.AddForce (dir);

		}

		private void MoveTowardsUsingVelocity(Vector2 position){

			//Vector2 dir = position - (Vector2)_parent.transform.position;
			Vector2 dir = (position - (Vector2)_parent.transform.position).normalized * Speed;
			rigidbody.velocity = dir;
		}
	}
}

