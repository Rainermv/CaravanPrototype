//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace Caravan
{
	public class BehaviourShooter : GameElementBehaviour
	{
		GameObject _projectile;
		float _range; 
		float _frequency;
		string _target_tag;
		int _damage;

		private float shoot_timer;
		private float scan_time = 0.1f;
		private float scan_timer = 0.1f;

		private GameObject locked_target;

		public GameObject Projectile {
			get {
				return _projectile;
			}
			set {
				_projectile = value;
			}
		}

		public float Range {
			get {
				return _range;
			}
			set {
				_range = value;
			}
		}

		public float Frequency {
			get {
				return _frequency;
			}
			set {
				_frequency = value;
			}
		}

		public BehaviourShooter (GameElement parent,
								GameObject projectile,
		                        int damage,
                                float range,
                                float frequency,
                                string target_tag) : base (parent)
		{
			_projectile = projectile;
			_range = range;
			_damage = damage;
			_frequency = frequency;
			shoot_timer = frequency;
			_target_tag = target_tag;

		}

		public override void GameElementUpdate(){

			_parent.DrawRange (Range);
		}

		public override void GameElementFixedUpdate (){

			ScanTimer ();

			if (locked_target != null) {
				ShootTimer ();
			} else
				shoot_timer = 0f;

		}

		void ScanTimer(){
			
			scan_timer -= Time.fixedDeltaTime;
			
			if (scan_timer < 0) {
				ScanTargets();
				scan_timer = scan_time;
			}
			
		}

		void ShootTimer(){

			shoot_timer -= Time.fixedDeltaTime;
		
			if (shoot_timer <= 0) {
				ShootTarget ();
				shoot_timer = _frequency;
			}

		}

		// Lock on the closest target based on the given target tag
		void ScanTargets(){

			GameObject[] targets = GameObject.FindGameObjectsWithTag (_target_tag);

			if (targets != null && targets.Length > 0) {

				float shorter_distance = _range;

				for (int i = 0; i < targets.Length; i++){

					GameObject target = targets[i];
					float target_distance = Vector2.Distance(_parent.transform.position, target.transform.position);

					if (target_distance < _range && target_distance < shorter_distance){
						shorter_distance = target_distance;

						// LOCK ON CLOSEST TARGET
						locked_target = target;
					}

				}

			}

		}

		void ShootTarget(){

			//Vector2 target_position = locked_target.transform.position;

			if (Projectile != null) {

				Vector2 delta_position = locked_target.transform.position - Parent.transform.position;

				float angle = Mathf.Atan2(delta_position.y, delta_position.x) * Mathf.Rad2Deg;
				Quaternion rotation = Quaternion.AngleAxis(angle, Vector3.forward);

				GameObject instantiated_projectile = GameObject.Instantiate
					(Projectile,_parent.transform.position,rotation) as GameObject;

				instantiated_projectile.SendMessage("SetDamage", _damage);
				instantiated_projectile.SendMessage("SetTarget", locked_target);

			}

		}

		public override void GameElementUpdateSelection() {
			SelectionInterfaceHandler.GetInstance ().UpdateDamage (_damage);
			SelectionInterfaceHandler.GetInstance ().UpdateRange (_range);
		}

		public override void GameElementTouch(){
			SelectionInterfaceHandler.GetInstance ().EnableDamage (true);
			SelectionInterfaceHandler.GetInstance ().EnableRange (true);
		}

		public override void GameElementUpgrade(GameElementBehaviour upgrade_behaviour){
			
			BehaviourShooter shooter_behaviour = upgrade_behaviour as BehaviourShooter;
			
			_projectile = shooter_behaviour._projectile;
			_range 		= shooter_behaviour._range;
			_frequency 	= shooter_behaviour._frequency;
			_target_tag = shooter_behaviour._target_tag;
			_damage 	= shooter_behaviour._damage;
			
		}

	}
}

