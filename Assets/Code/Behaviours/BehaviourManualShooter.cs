//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace Caravan
{
	public class BehaviourManualShooter : GameElementBehaviour
	{

		private GameObject _projectile_prefab;

		//DragShooter _drag_shooter_prefab;
		//Transform _spawn_position;

		float _power;
		int _damage;

		GameObject projectile;

		//DragShooter drag_shooter;


		public BehaviourManualShooter (GameElement parent, GameObject projectile_prefab, 
		                               float power, int damage): 
			base (parent)
		{
			//this._drag_shooter_prefab  = object_prefab;
			//this._spawn_position 	= spawn_position;
			_projectile_prefab = projectile_prefab;

			this._damage = damage;
			this._power = power;
		}

//		public void SpawnObject(){
//
//			if (drag_shooter != null)
//				GameObject.Destroy (drag_shooter);
//
//			if (_drag_shooter_prefab != null) {
//				GameObject drag_object = (GameObject) GameObject.Instantiate 
//					(_drag_shooter_prefab.gameObject,_spawn_position.position,Quaternion.identity);
//
//				drag_shooter = drag_object.GetComponent<DragShooter>();
//
//				drag_shooter.Damage = _damage;
//				drag_shooter.Power = _power;
//
//			}
//		}

//		public override void GameElementOnDestroy (bool was_killed)
//		{
//			base.GameElementOnDestroy (was_killed);
//			GameObject.Destroy (drag_shooter);
//		}

		public void Shoot(Vector2 delta_position){



			// set Angle
			float angle = Mathf.Atan2(delta_position.y, delta_position.x) * Mathf.Rad2Deg;
			Quaternion rotation = Quaternion.AngleAxis(angle, Vector3.forward);

			// instantiate
			projectile = GameObject.Instantiate (_projectile_prefab, Parent.transform.position, rotation) as GameObject;
			
			// add Force to projectile
			Vector2 Force = delta_position * _power;
			projectile.GetComponent<Rigidbody2D> ().AddForce (Force);
			


		}
	}
}

