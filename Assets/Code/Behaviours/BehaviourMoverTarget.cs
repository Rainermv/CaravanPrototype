//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//using System;
using UnityEngine;


namespace Caravan
{
	public class BehaviourMoverTarget : BehaviourMover
	{
		//float _speed = 1.0f;
		GameObject _target;

		float destroy_timer = 0f;
		//Rigidbody2D rigidbody = null;

		public GameObject Target {
			get {
				return _target;
			}
			set {
				_target = value;
			}
		}

		public void SetDestroyTimer(float value) {

			destroy_timer = value;
		}

		public BehaviourMoverTarget (GameElement parent, GameObject target, float speed, bool use_velocity) : 
			base(parent, speed, use_velocity)
		{
			//_point = point;
			//_speed = speed;
			_target = target;

			//rigidbody.drag = 1.0f;

			//rigidbody = _parent.gameObject.GetComponent<Rigidbody2D> ();
			
		}

		public override void GameElementFixedUpdate (){
			
			if (rigidbody != null && Target != null)
				MoveTowards(_target.transform.position);
				//MoveTowardsUsingVelocity (_target.transform.position);
			else {
				_parent.DestroyGameElement (destroy_timer, false);
			}

		}

//		void FollowTargetForce(){
//
//			Vector2 dir = _target.transform.position - _parent.transform.position;
//			
//			//to give this vector a magnitude in relation to speed, normalize it then multiply the result by the speed :
//			
//			dir = (_target.transform.position - _parent.transform.position).normalized * Speed;
//			
//			//finally, simply apply the vector to the velocity variable of the rigidbody component :
//			
//			//rigidbody.velocity = dir;
//			rigidbody.AddForce (dir);
//
//		}
//
//		void FollowTargetVelocity(){
//
//			Vector2 target_position = _target.transform.position;
//
//			Vector2 dir = target_position - (Vector2)_parent.transform.position;
//			
//			//to give this vector a magnitude in relation to speed, normalize it then multiply the result by the speed :
//
//
//			dir = (target_position - (Vector2)_parent.transform.position).normalized * Speed;
//			
//			//finally, simply apply the vector to the velocity variable of the rigidbody component :
//			
//			rigidbody.velocity = dir;
//			//rigidbody.AddForce (-dir);
//		}

	}



}

