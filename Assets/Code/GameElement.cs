//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.Collections;

namespace Caravan
{
	public class GameElement : MonoBehaviour
	{
		public string name_string = "Default";

		public bool IgnoreTouch;

		public AudioClip Audio_OnSpawn;
		public AudioClip Audio_OnUpgrade;
		public AudioClip Audio_OnSelect;
		public AudioClip Audio_OnGetHit;
		public AudioClip Audio_OnDie;

		public int Gameplay_BuildCost;
		public GameElement Gameplay_Upgrade;
		public int Gameplay_UpgradeCost;

		public GameObject range_display_reference;
		
		private GameObject range_display;

		//private AudioSource audio_source_reference;
		private SpriteRenderer sprite_renderer_reference;
		private List<GameElementBehaviour> behaviours = new List<GameElementBehaviour>();

		public SpriteRenderer Sprite_renderer_reference {
			get {
				return sprite_renderer_reference;
			}
			set {
				sprite_renderer_reference = value;
			}
		}

		public List<GameElementBehaviour> Behaviours {
			get {
				return behaviours;
			}
			set {
				behaviours = value;
			}
		}

		public GameObject GetRangeDisplay(){

			return range_display;
		}


		protected virtual void Awake(){
			sprite_renderer_reference = GetComponent<SpriteRenderer> ();

			if (sprite_renderer_reference == null)
				Debug.LogWarning ("Missing sprite renderer on Game Element: " + gameObject.name);
		}

		protected virtual void Start(){

			if (range_display_reference != null) {
				range_display = Instantiate (range_display_reference,transform.position,Quaternion.identity) as GameObject;
				range_display.transform.parent = transform;
			}

			PlaySound (Audio_OnSpawn);


		}

		protected virtual void Update(){

			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementUpdate ();
		}

		protected virtual void FixedUpdate(){
			
			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementFixedUpdate ();
		}

		protected virtual void LateUpdate(){
			
			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementLateUpdate ();
		}

		protected virtual void OnTriggerEnter2D(Collider2D other){
			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementTrigger (other);
		}

		protected virtual void OnCollisionEnter2D(Collision2D collision){

			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementCollide (collision);
		}
		public void GetHit (int value){
			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementDamage (value);

			PlaySound (Audio_OnGetHit);

		}
		public virtual void DestroyGameElement (float timer, bool was_killed){
			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementOnDestroy (was_killed);

			GameObject.Destroy (gameObject, timer);
		}

		public virtual void UpdateSelection(){

			if (IgnoreTouch)
				return;

			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementUpdateSelection ();

			SelectionInterfaceHandler.GetInstance ().EnableUpgradeButton (Gameplay_Upgrade != null);

			if (Gameplay_Upgrade != null)
				SelectionInterfaceHandler.GetInstance ().UpdateButton (Gameplay_UpgradeCost);


		}

		void OnMouseDown(){
		//public void OnLeftClick(){

			if (IgnoreTouch)
				return;

			SelectionInterfaceHandler.GetInstance ().SelectElement (this);

			for (int i = 0; i < behaviours.Count; i++)
				behaviours[i].GameElementTouch ();

			PlaySound (Audio_OnSelect);
		}

		public void Upgrade(){

			if (Gameplay_Upgrade == null)
				return;

			if (GameController.GetInstance ().SpendResource (Gameplay_UpgradeCost)) {

				GameElement temp_object = (Instantiate (Gameplay_Upgrade) as GameElement).GetComponent<GameElement>();

				name_string = temp_object.name_string;

				// modify sprite and scale
				sprite_renderer_reference.sprite = 				 temp_object.Sprite_renderer_reference.sprite;
				sprite_renderer_reference.transform.localScale = temp_object.transform.localScale;

				// modify behaviours
				UpgradeBehaviours(temp_object.behaviours);

				// update next upgrade level and cost
				Gameplay_Upgrade = temp_object.Gameplay_Upgrade;
				Gameplay_UpgradeCost 	= temp_object.Gameplay_UpgradeCost;

				UpgradeTransferSounds(temp_object);

				GameObject.Destroy (temp_object.gameObject);

				PlaySound (Audio_OnUpgrade);
			}
		}

		void UpgradeBehaviours(List<GameElementBehaviour> upgraded_behaviours){

			List <GameElementBehaviour> temp_behaviour_list = new List<GameElementBehaviour> ();

			foreach (GameElementBehaviour new_behaviour in upgraded_behaviours) {

				bool behaviour_exists = false;

				foreach (GameElementBehaviour old_behaviour in behaviours) {

					// if there is a behaviour of the same type, upgrade it
					if (old_behaviour.GetType () == new_behaviour.GetType ()) {
						old_behaviour.GameElementUpgrade (new_behaviour);

						Debug.Log ("Modified behaviour: " + new_behaviour.GetType());
						temp_behaviour_list.Add (old_behaviour);

						behaviour_exists = true;
						break;
					}
				}

				if (!behaviour_exists){

					new_behaviour.Parent = this;
					temp_behaviour_list.Add (new_behaviour);

					Debug.Log ("Added behaviour: " + new_behaviour.GetType());
				}
			}

			behaviours.Clear ();
			behaviours.AddRange (temp_behaviour_list);

		}

		void UpgradeTransferSounds(GameElement upgraded_element){

			Audio_OnSpawn 	= upgraded_element.Audio_OnSpawn;
			Audio_OnUpgrade = upgraded_element.Audio_OnUpgrade;
			Audio_OnSelect 	= upgraded_element.Audio_OnSelect;
			Audio_OnGetHit 	= upgraded_element.Audio_OnGetHit;
			Audio_OnDie 	= upgraded_element.Audio_OnDie;

		}

		//protected virtual void render

		public virtual float GetRange(){

			return 0;
		}

		public void DrawRange(float range_value){

			if (range_display != null){
				range_display.transform.localScale = new Vector3(range_value*2f,range_value*2f,1f);
			}
			
		}

		public void PlaySound(AudioClip audio){

			if (audio != null)
				SoundSystem.SoundController.GetInstance().PlayBGS (audio);

		}

		public void DebugBehaviours(){

			foreach (GameElementBehaviour behaviour in behaviours) {
				Debug.Log (behaviour.GetType().ToString());
			}

		}

		public void FlashColor(Color color, float time){

			StartCoroutine (CoroutineFlashColor (color, time));

		}

		IEnumerator CoroutineFlashColor(Color color, float seconds){

			Color original_color = GetComponent<SpriteRenderer> ().color;

			yield return StartCoroutine(CoroutineFlashTo (color, seconds/2));
			yield return StartCoroutine(CoroutineFlashTo (original_color, seconds/2));


		}

		IEnumerator CoroutineFlashTo(Color new_color, float seconds){

			float lerp = 0f;
			SpriteRenderer spr_renderer = GetComponent<SpriteRenderer> ();

			Color old_color = spr_renderer.color;

			float time_step = 1 / seconds;

			while (seconds > 0) {

				lerp += time_step;

				spr_renderer.color = Color.Lerp(old_color,new_color,lerp);

				seconds -= Time.fixedDeltaTime;

				//yield return new WaitForFixedUpdate();
				yield return 0;
			}

		}


	}
}

